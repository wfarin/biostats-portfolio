install.packages("rpact")
install.packages("gsDesign")
install.packages("gt")
# Chargement des librairies
library(survival)
library(survminer)
get_number <- function (x, element) {
x[[element]]
}
kable(probEvent_rpact)
library(rpact)
library(tidyverse)
install.packages("tidyverse")
library(rpact)
library(tidyverse)
library(gsDesign)
library(gt)
get_number <- function (x, element) {
x[[element]]
}
PATH_OUTPUT <- getwd() %>%
dirname() %>%
file.path("output")
sampleSize_rpact <- getSampleSizeSurvival(accrualTime = 8, followUpTime = 10,
sided = 1, alpha = 0.05, beta = 0.2,
median1 = 9, median2 = 14.5,
)
kable(sampleSize_rpact)
probEvent_rpact <- getEventProbabilities(lambda1 = log(2)/9, lambda2 = log(2)/14.5,
time =18,
accrualTime = 8,
maxNumberOfSubjects = 191
)
kable(probEvent_rpact)
n_event_rpact <- probEvent_rpact$cumulativeEventProbabilities * 191
design_rpact <- getDesignGroupSequential(kMax = 1,
sided = 1, alpha = 0.05,
typeOfDesign = "asOF"
)
powerResult_rpact <- getPowerSurvival(
design = design_rpact, median1 = 9, median2 = 14.5,
accrualTime = 8,
maxNumberOfSubjects = 191, maxNumberOfEvents = n_event_rpact
)
kable(powerResult_rpact)
r <- 1 # Experimental/control randomization ratio
alpha <- 0.05 # 1-sided Type I error
beta <- 0.2 # Type II error (1 - power)
hr <- 14.5/9 # Hazard ratio (experimental / control)
controlMedian <- 9
dropoutRate <- 0 # Exponential dropout rate per time unit
enrollDuration <- 8
minfup <- 10 # Minimum follow-up
Nlf <- nSurvival(sided = 1,
lambda1 = log(2) / 9, lambda2 = log(2) / 14.5,
eta = dropoutRate,
Tr = enrollDuration,
Ts = 18,
ratio = r,
alpha = alpha,
beta = beta
)
cat(paste("Sample size: ", ceiling(Nlf$n), "Events: ", ceiling(Nlf$nEvents), "\n"))
table_n <- expand_grid(alpha = c(0.025, 0.05, 0.10, 0.15, 0.20),
power = c(0.60, 0.65, 0.70, 0.75, 0.80, 0.85, 0.90, 0.95),
median1 = 5.6,
median2 = c(7.6, 8.6, 9.1)) %>%
mutate(object_rpact = pmap(list(alpha = alpha,
beta = 1 - power,
median1 = median1,
median2 = median2),
getSampleSizeSurvival,
followUpTime = 6,
accrualTime = 18)) %>%
mutate(total_subject = map_dbl(object_rpact, get_number, element = "numberOfSubjects")) %>%
mutate(n1_subject = map_dbl(object_rpact, get_number, element = "numberOfSubjects1")) %>%
mutate(n2_subject = map_dbl(object_rpact, get_number, element = "numberOfSubjects2")) %>%
mutate(hazardratio = map_dbl(object_rpact, get_number, element = "hazardRatio")) %>%
mutate(event_h1 = map_dbl(object_rpact, get_number, element = "expectedEventsH1")) %>%
mutate(across(c(total_subject, n1_subject, n2_subject), ceiling)) %>%
mutate(across(c(alpha, power, hazardratio), ~ round(.x, digits = 3))) %>%
mutate(across(c(event_h1), ~ round(.x, digits = 1))) %>%
mutate(followUpTime = 6, accrualTime = 18) %>%
mutate(total_study = followUpTime + accrualTime) %>%
arrange(alpha, power, n1_subject, n2_subject, total_subject, median2) %>%
mutate(scenario = row_number()) %>%
select(scenario, power, alpha, n1_subject, n2_subject, total_subject, event_h1,
hazardratio, median1, median2, accrualTime, total_study) %>%
rename(Scenario = scenario, Power = power, Alpha = alpha,
`Number of Events` = event_h1,
`Control # Patients` = n1_subject, `Experimental # Patients` = n2_subject,
`Total # patients` = total_subject, `Hazard Ratio (HR)` = hazardratio,
`Control MedSurv Time` = median1, `Experimental MedSurv Time` = median2,
`Enrolment Time (months)` = accrualTime, `Total Study Time (months)` = total_study)
table_n %>%
# select(-c(object_rpact, hazard, thetah0)) %>%
gt() |>
tab_header(title = "Tables with new inputs")
table_n %>%
write_delim(file = file.path(PATH_OUTPUT, "Tables", "Table_new_plan_18_months.csv"), delim = ";")
